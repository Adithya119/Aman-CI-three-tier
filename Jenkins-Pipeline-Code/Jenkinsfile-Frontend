@Library("my-first-jsl") _

pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('AWS_ACC_ID')
        AWS_ECR_REPO_NAME = credentials('FRONTEND_REPO')
        AWS_DEFAULT_REGION = 'ap-south-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {

        script {
            def CleaningWorkspaceAndCheckoutFromGit = mernCI('CleaningWorkspaceAndCheckoutFromGit')    // Calls the shared library method 'mernCI' with the argument 'CleaningWorkspaceAndCheckoutFromGit'. This returns the closure for CleaningWorkspaceAndCheckoutFromGit.
            CleaningWorkspaceAndCheckoutFromGit()                                // Executes the closure for this block, running the logic defined in the shared library.
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonarqube server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=mern-frontend \
                        -Dsonar.projectKey=mern-frontend '''
                    }
                }
            }
        }
        
        script {
            def Quality Check = mernCI('Quality Check')
            Quality Check()
        }

        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {  
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'

                    }
                }
            }
        }
        
        script {
            def EcrImagePushAndCheckoutCode = mernCI('EcrImagePushAndCheckoutCode')
            EcrImagePushAndCheckoutCode()            
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "Aman-Mern-CICD"    // value should match the github repository name
                GIT_USER_NAME = "Adithya119"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'GITHUB_PAT', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "arkariveda@gmail.com"
                            git config user.name "Adithya"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                        '''
                    }
                }
            }
        }
    }
}